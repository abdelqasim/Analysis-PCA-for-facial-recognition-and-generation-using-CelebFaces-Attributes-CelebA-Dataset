import os
import numpy as np
import cv2
from sklearn.decomposition import PCA
from sklearn.metrics.pairwise import euclidean_distances
import matplotlib.pyplot as plt

def load_images_from_folder(folder):
    images = []
    for filename in os.listdir(folder):
        img = cv2.imread(os.path.join(folder,filename), cv2.IMREAD_GRAYSCALE)
        if img is not None:
            images.append(img)
        if len(images) == 250:
            break
    if len(images) == 0:
        raise ValueError("No images found in the specified folder.")
    return images


def prepare_data(images):
    resized_images = [cv2.resize(img, (100, 100)) for img in images]
    image_vectors = [img.flatten() for img in resized_images]
    return image_vectors


def perform_pca(image_vectors):
    X = np.array(image_vectors)
    if len(X) == 0:
        raise ValueError("No images found for PCA analysis.")
    if X.ndim == 1:
        X = X.reshape(1, -1)

    pca = PCA()
    pca.fit(X)
    return pca


def face_reconstruction(pca, face_vector, n_components):

    projected = pca.transform(face_vector.reshape(1, -1))

    reconstructed = np.dot(projected[:, :n_components], pca.components_[:n_components, :])
    reconstructed += pca.mean_
    return reconstructed


celeb_folder = "/Users/abood/Downloads/archive/img_align_celeba/img_align_celeba"
celeb_images = load_images_from_folder(celeb_folder)
celeb_vectors = prepare_data(celeb_images)


your_face_path = "/Users/abood/Downloads/usethis-2 2.jpg"
your_face = cv2.imread(your_face_path, cv2.IMREAD_GRAYSCALE)
your_face = cv2.resize(your_face, (100, 100))


pca = perform_pca(celeb_vectors)


n_components_list = [20, 30, 40, 50]
reconstructed_faces = []
for n_components in n_components_list:
    reconstructed_face = face_reconstruction(pca, your_face, n_components)
    reconstructed_faces.append(reconstructed_face)


similarities = []
for celeb_vector in celeb_vectors:
    similarity = euclidean_distances([your_face.flatten()], [celeb_vector])[0][0]
    similarities.append(similarity)

closest_match_index = np.argmin(similarities)
closest_match_image = celeb_images[closest_match_index]


plt.figure(figsize=(6, 6))
plt.imshow(your_face, cmap='gray')
plt.title('Original Image')
plt.show()


plt.figure(figsize=(6, 6))
plt.imshow(closest_match_image, cmap='gray')
plt.title('Closest Match')
plt.show()


plt.figure(figsize=(15, 4))
for i, n_components in enumerate(n_components_list):
    plt.subplot(1, len(n_components_list), i + 1)
    plt.imshow(reconstructed_faces[i].reshape(100, 100), cmap='gray')
    plt.title('n_components = {}'.format(n_components))
plt.show()
